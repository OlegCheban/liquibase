//
// This file was generated by the Eclipse Implementation of JAXB, v3.0.2 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2025.01.10 at 10:45:55 AM MST 
//


package liquibase.api.generated;

import java.util.ArrayList;
import java.util.List;
import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlAnyElement;
import jakarta.xml.bind.annotation.XmlElementRef;
import jakarta.xml.bind.annotation.XmlElementRefs;
import jakarta.xml.bind.annotation.XmlRootElement;
import jakarta.xml.bind.annotation.XmlType;
import org.w3c.dom.Element;


/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;choice&gt;
 *         &lt;group ref="{http://www.liquibase.org/xml/ns/dbchangelog}PreConditionChildren" maxOccurs="unbounded"/&gt;
 *       &lt;/choice&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "preConditionChildren"
})
@XmlRootElement(name = "not")
public class Not {

    @XmlElementRefs({
        @XmlElementRef(name = "and", namespace = "http://www.liquibase.org/xml/ns/dbchangelog", type = And.class, required = false),
        @XmlElementRef(name = "or", namespace = "http://www.liquibase.org/xml/ns/dbchangelog", type = Or.class, required = false),
        @XmlElementRef(name = "not", namespace = "http://www.liquibase.org/xml/ns/dbchangelog", type = Not.class, required = false),
        @XmlElementRef(name = "dbms", namespace = "http://www.liquibase.org/xml/ns/dbchangelog", type = Dbms.class, required = false),
        @XmlElementRef(name = "runningAs", namespace = "http://www.liquibase.org/xml/ns/dbchangelog", type = RunningAs.class, required = false),
        @XmlElementRef(name = "changeSetExecuted", namespace = "http://www.liquibase.org/xml/ns/dbchangelog", type = ChangeSetExecuted.class, required = false),
        @XmlElementRef(name = "tableExists", namespace = "http://www.liquibase.org/xml/ns/dbchangelog", type = TableExists.class, required = false),
        @XmlElementRef(name = "columnExists", namespace = "http://www.liquibase.org/xml/ns/dbchangelog", type = ColumnExists.class, required = false),
        @XmlElementRef(name = "sequenceExists", namespace = "http://www.liquibase.org/xml/ns/dbchangelog", type = SequenceExists.class, required = false),
        @XmlElementRef(name = "foreignKeyConstraintExists", namespace = "http://www.liquibase.org/xml/ns/dbchangelog", type = ForeignKeyConstraintExists.class, required = false),
        @XmlElementRef(name = "indexExists", namespace = "http://www.liquibase.org/xml/ns/dbchangelog", type = IndexExists.class, required = false),
        @XmlElementRef(name = "uniqueConstraintExists", namespace = "http://www.liquibase.org/xml/ns/dbchangelog", type = UniqueConstraintExists.class, required = false),
        @XmlElementRef(name = "primaryKeyExists", namespace = "http://www.liquibase.org/xml/ns/dbchangelog", type = PrimaryKeyExists.class, required = false),
        @XmlElementRef(name = "viewExists", namespace = "http://www.liquibase.org/xml/ns/dbchangelog", type = ViewExists.class, required = false),
        @XmlElementRef(name = "tableIsEmpty", namespace = "http://www.liquibase.org/xml/ns/dbchangelog", type = TableIsEmpty.class, required = false),
        @XmlElementRef(name = "rowCount", namespace = "http://www.liquibase.org/xml/ns/dbchangelog", type = RowCount.class, required = false),
        @XmlElementRef(name = "sqlCheck", namespace = "http://www.liquibase.org/xml/ns/dbchangelog", type = SqlCheck.class, required = false),
        @XmlElementRef(name = "changeLogPropertyDefined", namespace = "http://www.liquibase.org/xml/ns/dbchangelog", type = ChangeLogPropertyDefined.class, required = false),
        @XmlElementRef(name = "expectedQuotingStrategy", namespace = "http://www.liquibase.org/xml/ns/dbchangelog", type = ExpectedQuotingStrategy.class, required = false),
        @XmlElementRef(name = "customPrecondition", namespace = "http://www.liquibase.org/xml/ns/dbchangelog", type = CustomPrecondition.class, required = false)
    })
    @XmlAnyElement(lax = true)
    protected List<Object> preConditionChildren;

    /**
     * Gets the value of the preConditionChildren property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the Jakarta XML Binding object.
     * This is why there is not a <CODE>set</CODE> method for the preConditionChildren property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getPreConditionChildren().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Object }
     * {@link And }
     * {@link ChangeLogPropertyDefined }
     * {@link ChangeSetExecuted }
     * {@link ColumnExists }
     * {@link CustomPrecondition }
     * {@link Dbms }
     * {@link ExpectedQuotingStrategy }
     * {@link ForeignKeyConstraintExists }
     * {@link IndexExists }
     * {@link Not }
     * {@link Or }
     * {@link PrimaryKeyExists }
     * {@link RowCount }
     * {@link RunningAs }
     * {@link SequenceExists }
     * {@link SqlCheck }
     * {@link TableExists }
     * {@link TableIsEmpty }
     * {@link UniqueConstraintExists }
     * {@link ViewExists }
     * {@link Element }
     * 
     * 
     */
    public List<Object> getPreConditionChildren() {
        if (preConditionChildren == null) {
            preConditionChildren = new ArrayList<Object>();
        }
        return this.preConditionChildren;
    }

}
